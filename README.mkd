# gaf -- gitify arbitrary files

Normally, the git work tree has to be within a given directory; you can't
manage arbitrary files using git.  Gaf allows you to do what it says on the
tin -- gitify arbitrary files.  It does this by **copying** files between the
**current directory** and the **gaf repo**.

I use gaf mainly for:

*   "dotfile" management and sync across machines and accounts
*   system config file management (/etc, /var/named, and so on) for multiple
    machines.

Once things are all setup, I only ever run `gaf cycle && gaf push` at
(ir)regular intervals.

## the gaf repo

The **gaf repo** is `~/.gaf` by default, though you can set the `GAF_REPO` env
var to override that.  It's just a normal git repo, and propagation of that
repo between different users/machines (don't forget to clone it as `~/.gaf`!)
is upto you.  I assume you have a working knowledge of git and know how to do
that.

Each branch in the gaf repo is a **feature**.  For example, you might have
features "vim", "bash", "zsh", "devel", "mail", etc., and different
users/machines may use different subsets of these features, even though the
repo itself carries all of them.  The features used by any user are listed in
a simple text file called the **feature list**, which is `~/.gaf.flist` by
default, or at `$GAF_REPO.flist` otherwise.  The feature list is automatically
updated by the 'save' and 'restore' commands.

This is also how the same repo holds all my dotfiles as well as system config
info for all the machines I "own".

## gaf commands -- overview

The last section has detailed descriptions but here's a quick overview:
**init** creates the repo (one time), **save** and **restore** are the main
"workhorse" commands, though **cycle** is the one you will actually use most
often.  **list**, **find**, **diff**, and **untracked** are helper commands
you might occasionally use.  Finally, any unrecognised command is passed on to
git, which is how `gaf push` works.

## managing /etc and such

If you login as root, cd to "/", and set GAF\_REPO to some non-default
location, gaf can manage your system files.  It's kinda like
[etckeeper](http://etckeeper.branchable.com/), with a few important
differences that I really needed:

*   It doesn't unconditionally commit the whole of `/etc` every night (though
    if you do want that it's trivial: just edit your crontab and add something
    like `cd /; GAF_REPO=$HOME/.sysgaf gaf save etc /etc`).
*   It lets me add stuff outside `/etc` as well, like `/var/named/`...,
    `/var/spool/cron`, etc.
*   It lets me keep the config for *many* machines in *one* repo -- they're
    just different "features".

Gaf saves and set the permissions also (only basic stuff, not xattrs, facls,
or selinux stuff).  If running as root, it can also deal with saving and
restoring owner and group ids.

## gaf commands

Here is the complete list, with sample usages where appropriate.

*   **`gaf init`** -- creates the repo (`~/.gaf` by default, or wherever the
    env var `GAF_REPO` points to).

        git init

*   **`gaf save`**

    *   `gaf save <branch> <paths>` -- copies given files and directories to
        the repo and commits them on the given branch name.  The branch will
        be created if needed.

            gaf save base .bashrc .gitconfig .less .vimrc .vim
            gaf save personal .muttrc* .taskrc .ssh .gnupg
            gaf save scripts bin

    *   `gaf save <branch>` -- with just a branch name, recopies and
        commits files **already known** to the branch (think "git add -u"
        here).

            gaf save base

    *   `gaf save` (with no arguments) is a shortcut for running `gaf save
        <branch>` for each branch in the feature list.

            gaf save

    <font color="red">**WARNING**</font>: `gaf save` does not deal with
    deleted files.  You will have to "cd" to the gaf repo directory and fix it
    yourself.  This may change later, if people ask!

    Any branch you save is added to the feature list.

*   **`gaf restore`**

    *   `gaf restore <branch>` -- copies files from branch to current
        directory.

            gaf restore base
            gaf restore scripts

    *   `gaf restore` (with no arguments) is a shortcut for running `gaf
        restore <branch>` for each branch in the feature list.

    Any branch you restore is also added to the feature list.

    **TIP**: dry-running the restore is easy; just run it within an empty
    directory to see what files would get written.

*   **`gaf cycle`** -- does one complete cycle of a typical commit-then-merge
    development loop.  For each branch in the feature list, it runs:

    *   `gaf save <branch>` to save your local changes
    *   `gaf pull` to fetch and merge changes from the central server
    *   `gaf restore <branch>` to copy the (merged) files to your current
        directory

    **`gaf pull` may fail** due to merge conflicts, in which case the entire
    'cycle' operation will abort; you should "cd" to the gaf repo, fix the
    conflict, commit, and then rerun the `gaf cycle` command.

    **WARNING**: cycle won't run if you're not in your $HOME.  At present
    there's no getting around this; ask me if you need to.

*   **`gaf list`** -- like "git branch" but branches that are in the feature
    list are marked with an asterisk.

*   **`gaf find`**

    *   `gaf find <pattern>`: uses "egrep -i" on the *names* of the files
        (not contents!) in all branches and prints the results.

    *   `gaf find <pattern> <branches>`: same, but only in given branches.

*   **`gaf diff`**

    *   `gaf diff`: prints branch information then runs `git diff --stat`
        for each branch in the feature list.  Note this involves checking out
        each branch in turn!

    *   `gaf diff <pattern> [<diff options>]`: runs a full diff for each
        feature that matches the pattern give.  You can append whatever
        options you like; the default is nothing so you get a plain `git
        diff`.

    Use this to see what changes `gaf save` would commit.  Or conversely, what
    changes `gaf restore` would overwrite!

    This is the only command that usurps a git command name.  If you have an
    alias for diff in your `~/.gitconfig` you can still use that as normal of
    course.

*   **`gaf untracked`**

    Run this from whatever directory was the base for the files saved to gaf
    (usually $HOME).  It's a little inefficient but not noticeably so.  Useful
    to review the files you're *not* saving, and consider if some of them
    should be saved to some feature.

*   **`gaf <any git command or alias + args>`**

    Gaf takes anything that it does not recognise and runs it via *git*
    itself, after `cd`-ing to the gaf repo.  This is so that you don't have to
    do everything *from the gaf repo*.  For example, you could easily run
    `gaf remote add origin <URL>` from anywhere.
